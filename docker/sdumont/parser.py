#!/usr/bin/env python3


from Gaugi.messenger    import LoggingLevel, Logger
import argparse
import sys,os
os.system('source /setup_envs.sh')


mainLogger = Logger.getModuleLogger("Parser")
parser = argparse.ArgumentParser(description = '', add_help = False)
parser = argparse.ArgumentParser()


parser.add_argument('-o','--outputFile', action='store', dest='outputFile', required = True,
                    help = "The event file generated by the reconstruction framework.")

parser.add_argument('-f','--filter', action='store', dest='filter', required = True,
                    help = "The event filter (Zee, JF17 or MB).")

parser.add_argument('-e','--evt','--numberOfEventsPerJob', action='store', dest='numberOfEventsPerJob', required = True, type=int, default=1,
                    help = "The number of events per job to be generated.")

parser.add_argument('-j','--numberOfJobs', action='store', dest='njobs', required = True, type=int, default=1,
                    help = "The number of jobs in the pythia generation step. The number of total events will be the number of events (--evt) times the number of jobs.")

parser.add_argument('--pileupAvg', action='store', dest='pileupAvg', required = False, type=int, default=0,
                    help = "The pileup average (default is zero).")

parser.add_argument('--bc_id_start', action='store', dest='bc_id_start', required = False, type=int, default=-24,
                    help = "The bunch crossing id start.")

parser.add_argument('--bc_id_end', action='store', dest='bc_id_end', required = False, type=int, default=7,
                    help = "The bunch crossing id end.")

parser.add_argument('--bc_duration', action='store', dest='bc_duration', required = False, type=int, default=25,
                    help = "The bunch crossing duration (in nanoseconds).")

parser.add_argument('--outputLevel', action='store', dest='outputLevel', required = False, type=int, default=6,
                    help = "The output level messenger.")

parser.add_argument('-s','--seed', action='store', dest='seed', required = False, type=int, default=0,
                    help = "The pythia seed (zero is the clock system)")

parser.add_argument('-r','--reco_script', action='store', dest='reco_script', required = False , default='reco_trf.py',
                    help = "The reconstruction script used into the reco step. This script should be in lorenzett/scripts directory")




if len(sys.argv)==1:
  parser.print_help()
  sys.exit(1)

args = parser.parse_args()

# Get the number of cpus
import multiprocessing
ncpu = multiprocessing.cpu_count()


if args.filter == 'Zee':
    configfile="/code/lorenzett/generator/PythiaGenerator/data/zee_config.cmnd"
elif args.filter == 'JF17':
    configfile="/code/lorenzett/generator/PythiaGenerator/data/jet_config.cmnd"
elif args.filter == 'MB':
    configfile=''
else:
    mainLogger.fatal("Unknown option for --filter, please choose one of the following: Zee, JF17 or MB")




output = '/output/generator_' + args.outputFile


command = "python3 /code/lorenzett/scripts/generator.py -i {CONFIG} \
-s {SEED} \
--bc_id_start {BCID_START} \
--bc_id_end {BCID_END} \
--pileupAvg {AVGMU} \
--filter {FILTER} \
--evt {NEVENTS}".format(  CONFIG      = configfile,
                          SEED        = args.seed,
                          FILTER      = args.filter,
                          BCID_START  = args.bc_id_start,
                          BCID_END    = args.bc_id_end,
                          AVGMU       = args.pileupAvg,
                          NEVENTS     = args.numberOfEventsPerJob,
                          )

f = open('/command.sh', 'w')

command = "python3 /code/lorenzett/scripts/prun_job.py -o {OUTPUT} -c '{COMMAND}' -mt {NTHREADS} -n {NJOBS}".format(COMMAND=command,
                                                                                                                    NTHREADS=ncpu,
                                                                                                                    NJOBS=args.njobs,
                                                                                                                    OUTPUT=output)
print(command)
f.write(command)
f.write('\n')

#os.system(command)

input  = output
output = '/output/reco_'+args.outputFile
reco_script = args.reco_script
command = 'python3 /code/lorenzett/scripts/' + reco_script + ' -i {INPUT} -o {OUTPUT} -nt {NTHREADS}'.format( INPUT     = input,
                                                                                                              OUTPUT    = output,
                                                                                                              NTHREADS  = ncpu)

print(command)
f.write(command)
f.close()
#os.system(command)






