#ifndef ParticleGun_h
#define ParticleGun_h


#include "G4Kernel/PrimaryGenerator.h"
#include "EventInfo/EventInfo.h"
#include "EventInfo/EventInfoContainer.h"
#include "G4ParticleGun.hh"



class ParticleGun : public PrimaryGenerator 
{
   
  public:
    /** Constructor **/
    ParticleGun(std::string name);
    /** Destructor **/
    virtual ~ParticleGun();

    // The default behavior is that a single HepMC event generated by
    // GenerateHepMCEvent() will be converted to G4Event through HepMC2G4().
    virtual void GeneratePrimaryVertex(G4Event* anEvent) override;

    virtual StatusCode initialize() override;
    virtual StatusCode finalize() override;

    virtual PrimaryGenerator* copy() override;

  private:
    
    
    // We  have to take care for the position of primaries because
    // primary vertices outside the world voulme give rise to G4Execption.
    // If the default implementation is not adequate, an alternative
    // can be implemented in your own class.
    bool CheckVertexInsideWorld(const G4ThreeVector& pos) const;
  
    G4ParticleGun *m_gun;

    std::string m_particle;
    std::string m_eventKey;
    
    int m_nofParticles;

    float m_particleEnergy;
    
    std::vector<float >m_direction;


    int m_evt;


};
#endif
