#!/usr/bin/env python
from Gaugi.messenger    import LoggingLevel, Logger
from Gaugi              import GeV
import argparse
import sys,os


mainLogger = Logger.getModuleLogger("pythia")
parser = argparse.ArgumentParser(description = '', add_help = False)
parser = argparse.ArgumentParser()


parser.add_argument('-b','--minbiasFile', action='store', dest='minbiasFile', required = True,
                    help = "The minbias pythia file configuration")

parser.add_argument('-i','--mainFile', action='store', dest='mainFile', required = True,
                    help = "The main pythia file configuration")

parser.add_argument('-o','--outputFile', action='store', dest='outputFile', required = True,
                    help = "The event file generated by pythia.")

parser.add_argument('--outputLevel', action='store', dest='outputLevel', required = False, type=int, default=0,
                    help = "The output level messenger.")

parser.add_argument('-s','--seed', action='store', dest='seed', required = False, type=int, default=0,
                    help = "The pythia seed (zero is the clock system)")

parser.add_argument('--pileupAvg', action='store', dest='pileupAvg', required = False, type=int, default=0,
                    help = "The pileup average (default is zero).")

parser.add_argument('--filter', action='store', dest='filter', required = True,
                    help = "The event filter (Zee or JF17).")

parser.add_argument('--evt','--numberOfEvents', action='store', dest='numberOfEvents', required = True, type=int, default=1,
                    help = "The number of events to be generated.")



if len(sys.argv)==1:
  parser.print_help()
  sys.exit(1)

args = parser.parse_args()


if args.filter == "Zee":
  from PythiaGenerator import Zee
  generator = Zee( "Zee",
                 NumberOfEvents = args.numberOfEvents,
                 OutputFile     = args.outputFile,
                 MinbiasFile    = args.minbiasFile,
                 MainFile       = args.mainFile,
                 EtaMax         = 1.4,
                 MinPt          = 15*GeV,
                 PileupAvg      = args.pileupAvg,
                 Select         = 2,
                 BunchIdStart   = -8,
                 BunchIdEnd     = 7,
                 OutputLevel    = args.outputLevel,
                 Seed           = args.seed)
elif args.filter == "JF17":
  from PythiaGenerator import JF17
  generator =JF17( "JF17",
                   NumberOfEvents = args.numberOfEvents,
                   OutputFile     = args.outputFile,
                   MinbiasFile    = args.minbiasFile,
                   MainFile       = args.mainFile,
                   EtaMax         = 1.4,
                   MinPt          = 17*GeV,
                   PileupAvg      = args.pileupAvg,
                   Select         = 2,
                   BunchIdStart   = -8,
                   BunchIdEnd     = 7,
                   OutputLevel    = args.outputLevel,
                   Seed           = args.seed)
else:
  mainlogger.fatal("The event filter is not defined.")


# Run
generator.run()



