#!/usr/bin/env python3

from Gaugi.messenger      import LoggingLevel, Logger
from Gaugi                import GeV
from CaloCell.CaloDefs    import CaloSampling
from G4Kernel.utilities   import *
import numpy as np
import argparse
import sys,os


mainLogger = Logger.getModuleLogger("job")
parser = argparse.ArgumentParser(description = '', add_help = False)
parser = argparse.ArgumentParser()


parser.add_argument('-i','--inputFile', action='store', dest='inputFile', required = False,
                    help = "The event input file generated by the Pythia event generator.")

parser.add_argument('-o','--outputFile', action='store', dest='outputFile', required = False,
                    help = "The reconstructed event file generated by lzt/geant4 framework.")

parser.add_argument('-d', '--debug', action='store_true', dest='debug', required = False,
                    help = "In debug mode.")

parser.add_argument('--evt','--numberOfEvents', action='store', dest='numberOfEvents', required = False, type=int, default=-1,
                    help = "The number of events to apply the reconstruction.")

parser.add_argument('--outputLevel', action='store', dest='outputLevel', required = False, type=int, default=3,
                    help = "The output level messenger.")



pi = np.pi

if len(sys.argv)==1:
  parser.print_help()
  sys.exit(1)

args = parser.parse_args()


# Get all output names
if not '.root' in args.outputFile:
  args.outputFile+='.root'


outputLevel = 0 if args.debug else args.outputLevel

try:

  
 
  from GaugiKernel import ComponentAccumulator
  acc = ComponentAccumulator("ComponentAccumulator", args.outputFile)


  from RootStreamBuilder import RootStreamHITReader
  print('0')

  HIT = RootStreamHITReader("HITReader", 
                            InputFile       = args.inputFile,
                            HitsKey         = recordable("Hits"),
                            EventKey        = recordable("EventInfo"),
                            TruthKey        = recordable("Particles"),
                            NtupleName      = "CollectionTree",
                          )
  HIT.merge(acc)

  # digitalization!
  from DetectorATLASModel import CaloCellBuilder
  calorimeter = CaloCellBuilder("CaloCellBuilder",
                                HistogramPath = "Expert/Cells",
                                OutputLevel   = outputLevel,
                                HitsKey       = recordable("Hits"),
                                )
  calorimeter.merge(acc)


  from RootStreamBuilder import RootStreamESDMaker
  ESD = RootStreamESDMaker( "RootStreamESDMaker",
                             CellsKey        = recordable("Cells"),
                             EventKey        = recordable("EventInfo"),
                             TruthKey        = recordable("Particles"),
                             NtupleName      = "CollectionTree",
                             OutputLevel     = outputLevel)

  acc += ESD
  acc.run(args.numberOfEvents)
  
  
  sys.exit(0)
  
except  Exception as e:
  print(e)
  sys.exit(1)
