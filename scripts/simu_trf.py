#!/usr/bin/env python3

from Gaugi.messenger      import LoggingLevel, Logger
from Gaugi                import GeV
from P8Kernel             import EventReader
from G4Kernel             import *
from CaloCell.CaloDefs    import CaloSampling

import numpy as np
import argparse
import sys,os


mainLogger = Logger.getModuleLogger("job")
parser = argparse.ArgumentParser(description = '', add_help = False)
parser = argparse.ArgumentParser()


parser.add_argument('-i','--inputFile', action='store', dest='inputFile', required = False,
                    help = "The event input file generated by the Pythia event generator.")

parser.add_argument('-o','--outputFile', action='store', dest='outputFile', required = False,
                    help = "The reconstructed event file generated by lzt/geant4 framework.")

parser.add_argument('-d', '--debug', action='store_true', dest='debug', required = False,
                    help = "In debug mode.")

parser.add_argument('-nt','--numberOfThreads', action='store', dest='numberOfThreads', required = False, type=int, default=1,
                    help = "The number of threads")

parser.add_argument('--evt','--numberOfEvents', action='store', dest='numberOfEvents', required = False, type=int, default=None,
                    help = "The number of events to apply the reconstruction.")

parser.add_argument('--visualization', action='store_true', dest='visualization', required = False,
                    help = "Run with Qt interface.")

parser.add_argument('--enableMagneticField', action='store_true', dest='enableMagneticField',required = False, 
                    help = "Enable the magnetic field.")

parser.add_argument('--outputLevel', action='store', dest='outputLevel', required = False, type=int, default=3,
                    help = "The output level messenger.")

parser.add_argument('--pileupAvg', action='store', dest='pileupAvg', required = False, type=int, default=0,
                    help = "The pileup average (default is zero).")

parser.add_argument('-p','--pileupFile', action='store', dest='pileupFile', required = False, default=None, 
                    help = "The event HIT file to be merged (pileup)")

parser.add_argument('-m','--merge', action='store_true', dest='merge', required = False, 
                    help = "Merge all output files.")



pi = np.pi

if len(sys.argv)==1:
  parser.print_help()
  sys.exit(1)

args = parser.parse_args()


outputLevel = 0 if args.debug else args.outputLevel

try:

  from DetectorATLASModel import DetectorConstruction as ATLAS
  from DetectorATLASModel import CaloHitBuilder
  
  
  # Build the ATLAS detector
  detector = ATLAS("GenericATLASDetector", 
                   UseMagneticField = args.enableMagneticField, # Force to be false since the mag field it is not working yet
                   CutOnPhi = False
                   )
  

  acc = ComponentAccumulator("ComponentAccumulator", detector,
                              RunVis=args.visualization,
                              NumberOfThreads = args.numberOfThreads,
                              MergeOutputFiles = args.merge,
                              Seed = 512, # fixed seed since pythia will be used. The random must be in the pythia generation
                              OutputFile = args.outputFile)
  

  gun = EventReader( "PythiaGenerator",
                     EventKey   = recordable("EventInfo"),
                     TruthKey   = recordable("Particles"),
                     FileName   = args.inputFile,
                     BunchDuration = 25.0,#ns
                     )


  calorimeter_hits = CaloHitBuilder("CaloHitBuilder",
                                     HistogramPath = "Expert/Hits",
                                     OutputLevel   = outputLevel,
                                     )

  gun.merge(acc)
  calorimeter_hits.merge(acc)

  
  OutputHitsKey   = recordable("Hits")
  OutputEventKey  = recordable("EventInfo")

  if args.pileupFile:

    OutputEventKey += "_Merged"
    OutputHitsKey  += "_Merged"

    from PileupMergeBuilder import PileupMerge
    pileup = PileupMerge( "PileupMerge", 
                          InputFile       = args.pileupFile,
                          InputHitsKey    = recordable("Hits"),
                          InputEventKey   = recordable("EventInfo"),
                          OutputHitsKey   = OutputHitsKey,
                          OutputEventKey  = OutputEventKey,
                          NtupleName      = "CollectionTree",
                          PileupAvg       = args.pileupAvg,
                          OutputLevel     = outputLevel
                        )
    acc += pileup



  from RootStreamBuilder import RootStreamHITMaker

  HIT = RootStreamHITMaker( "RootStreamHITMaker",
                             # input from context
                             InputHitsKey    = OutputHitsKey,
                             InputEventKey   = OutputEventKey,
                             InputTruthKey   = recordable("Particles"),
                             # output to file
                             OutputHitsKey   = recordable("Hits"),
                             OutputEventKey  = recordable("EventInfo"),
                             OutputTruthKey  = recordable("Particles"),
                             OutputLevel     = outputLevel)

  acc += HIT
  acc.run(args.numberOfEvents)
  
  
  if args.visualization:
      input("Press Enter to quit...")

  sys.exit(0)
  
except  Exception as e:
  print(e)
  sys.exit(1)
