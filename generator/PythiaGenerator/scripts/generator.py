#!/usr/bin/env python3
from Gaugi.messenger    import LoggingLevel, Logger
from Gaugi              import GeV
import argparse
import sys,os


mainLogger = Logger.getModuleLogger("pythia")
parser = argparse.ArgumentParser(description = '', add_help = False)
parser = argparse.ArgumentParser()

#
# Mandatory arguments
#

parser.add_argument('-i','--mainFile', action='store', dest='mainFile', required = True, default="",
                    help = "The main pythia file configuration")

parser.add_argument('-o','--outputFile', action='store', dest='outputFile', required = True,
                    help = "The event file generated by pythia.")

parser.add_argument('--filter', action='store', dest='filter', required = True,
                    help = "The event filter (Zee or JF17).")

parser.add_argument('--evt','--numberOfEvents', action='store', dest='numberOfEvents', required = True, type=int, default=1,
                    help = "The number of events to be generated.")

#
# Pileup simulation arguments
#

parser.add_argument('--pileupAvg', action='store', dest='pileupAvg', required = False, type=int, default=0,
                    help = "The pileup average (default is zero).")

parser.add_argument('--bc_id_start', action='store', dest='bc_id_start', required = False, type=int, default=0,
                    help = "The bunch crossing id start.")

parser.add_argument('--bc_id_end', action='store', dest='bc_id_end', required = False, type=int, default=0,
                    help = "The bunch crossing id end.")

parser.add_argument('--bc_duration', action='store', dest='bc_duration', required = False, type=int, default=25,
                    help = "The bunch crossing duration (in nanoseconds).")


#
# Extra parameters
#

parser.add_argument('--outputLevel', action='store', dest='outputLevel', required = False, type=int, default=0,
                    help = "The output level messenger.")

parser.add_argument('-s','--seed', action='store', dest='seed', required = False, type=int, default=0,
                    help = "The pythia seed (zero is the clock system)")

#
# Used by energy estimation group
#

parser.add_argument('--dump_only_minbias', action='store_true', dest='dump_only_minbias', required = False,
                    help = "Dump only minimum bias.")




if len(sys.argv)==1:
  parser.print_help()
  sys.exit(1)

args = parser.parse_args()

from PythiaGenerator import EventGenerator


minbias = os.environ['LZT_PATH']+'/generator/PythiaGenerator/data/minbias_config.cmnd'

generator = EventGenerator( "EventGenerator",
                            OutputFile     = args.outputFile,
                            MinbiasFile    = minbias,
                            EtaMax         = 1.4,
                            Select         = 2,
                            PileupAvg      = args.pileupAvg,
                            BunchIdStart   = args.bc_id_start,
                            BunchIdEnd     = args.bc_id_end,
                            OutputLevel    = args.outputLevel,
                            Seed           = args.seed,
                            )



if args.filter == "Zee":
  from PythiaGenerator import Zee
  tool = Zee( "Zee",
              MainFile       = args.mainFile,
              EtaMax         = 1.4,
              MinPt          = 15*GeV,
              OutputLevel    = args.outputLevel,
              Seed           = args.seed)
  generator.push_back( tool )


elif args.filter == "JF17":
  from PythiaGenerator import JF17
  tool = JF17( "JF17",
               MainFile       = args.mainFile,
               EtaMax         = 1.4,
               MinPt          = 17*GeV,
               Select         = 2,
               OutputLevel    = args.outputLevel,
               Seed           = args.seed)
  generator.push_back( tool )

else:
  mainlogger.fatal("The event filter is not defined.")



# Run
generator.run(args.numberOfEvents)



